{"version":"6","defaultTimeframe":{"from":"-2h","to":"now()"},"defaultSegments":[],"sections":[{"id":"bad07edc-06eb-4552-96dc-ed67bfd8d30e","type":"markdown","markdown":"### Procesos con error en instrumentaciÃ³n"},{"id":"6ad2cc42-7830-49ac-8fc7-08ecbe297e69","type":"function","showTitle":false,"drilldownPath":[],"showInput":false,"state":{"input":{"timeframe":{"from":"-2h","to":"now()"},"value":"import { monitoredEntitiesMonitoringStateClient } from '@dynatrace-sdk/client-classic-environment-v2';\nimport { monitoredEntitiesClient } from '@dynatrace-sdk/client-classic-environment-v2';\n\nexport default async function () {\n  try {\n    const response = await monitoredEntitiesMonitoringStateClient.getStates({\n      entitySelector: 'type(\"PROCESS_GROUP_INSTANCE\")'\n    });\n\n    const results = [];\n\n    if (Array.isArray(response.monitoringStates)) {\n      for (const item of response.monitoringStates) {\n        if (item?.state != \"ok\" && item?.severity != \"info\" && item?.severity != \"deep_monitoring_ok\")\n            if (item?.entityId) {\n  \n            const pgResponse = await monitoredEntitiesClient.getEntity({\n              entityId: item.entityId\n            });\n\n            const hostResponse = await monitoredEntitiesClient.getEntity({\n              entityId: pgResponse.fromRelationships.isProcessOf[0].id\n            });\n              \n            const result = {\n              ...item,\n              name: pgResponse.displayName || \"Desconocido\",\n              host: hostResponse.displayName || \"Desconocido\",\n              //tags: tags.length > 0 ? tags : [\"Desconocido\"]\n            };\n          delete result.params;\n          results.push(result);\n        }\n      }\n    } else {\n      return(\"Error: `monitoringStates` no es un array.\");\n    }\n\n    return results;\n  } catch (error) {\n    return (\"Error obteniendo estados:\", error);\n  }\n}\n"},"visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":["entityId","state","severity","name","host"],"valueAxis":[],"categoryAxisLabel":"entityId,state,severity,name,host","valueAxisLabel":"","tooltipVariant":"single"},"circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"truncationMode":"middle"},"singleValue":{"alignment":"center","label":"error","recordField":"error","autoscale":true,"showLabel":true,"trend":{"trendType":"auto","isVisible":true},"sparklineSettings":{}},"table":{"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnTypeOverrides":[],"columnWidths":{"[\"icon\"]":86.62222290039062}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto","ratio":"auto"},"dataMappings":{"value":"entityId"},"displayedFields":["entityId","state","severity","name","host"],"truncationMode":"middle","colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"legend":"auto","yAxis":{"label":"Frequency","scale":"linear"},"colorPalette":"categorical","dataMappings":[],"variant":"single","truncationMode":"middle","displayedFields":["entityId"]},"valueBoundaries":{"min":"auto","max":"auto"},"autoSelectVisualization":false},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"success","result":{"code":200,"value":[{"entityId":"PROCESS_GROUP_INSTANCE-06974BBCDB016BB2","state":"restart_required","severity":"warning","name":"SQLPS.exe","host":"SQLCLUSTER2.bvsa.local"},{"entityId":"PROCESS_GROUP_INSTANCE-3B3E15435479C0BB","state":"restart_required_outdated_agent_apache_update","severity":"warning","name":"Apache Web Server IHS","host":"clihsn1.bvsa.local"},{"entityId":"PROCESS_GROUP_INSTANCE-30B1A96C22488370","state":"restart_required_outdated_agent_injected","severity":"warning","name":"ast.servicio.probatch.service.ServicioAgente","host":"clcobisn2.bvsa.local"},{"entityId":"PROCESS_GROUP_INSTANCE-48D0DFEBAD098DB8","state":"restart_required","severity":"warning","name":"opm redhat-marketplace (redhat-marketplace-559zd)","host":"master-1.closprod.bvsa.local"},{"entityId":"PROCESS_GROUP_INSTANCE-4D1B4C7CB6451A82","state":"restart_required","severity":"warning","name":"SQLPS.exe","host":"clbvsqln2.bvsa.local"},{"entityId":"PROCESS_GROUP_INSTANCE-47C2CFAD3415894E","state":"restart_required","severity":"warning","name":"opm community-operators (community-operators-zkdfd)","host":"master-1.closprod.bvsa.local"},{"entityId":"PROCESS_GROUP_INSTANCE-25F5EECCEBB9AAD7","state":"restart_required","severity":"warning","name":"Veeam.EndPoint.Manager.exe","host":"SQLCLUSTER2.bvsa.local"}],"notifications":[],"dateTime":"2025-03-10T18:54:07.717Z","input":{"timeframe":{"from":"-2h","to":"now()"},"value":"import { monitoredEntitiesMonitoringStateClient } from '@dynatrace-sdk/client-classic-environment-v2';\nimport { monitoredEntitiesClient } from '@dynatrace-sdk/client-classic-environment-v2';\n\nexport default async function () {\n  try {\n    const response = await monitoredEntitiesMonitoringStateClient.getStates({\n      entitySelector: 'type(\"PROCESS_GROUP_INSTANCE\")'\n    });\n\n    const results = [];\n\n    if (Array.isArray(response.monitoringStates)) {\n      for (const item of response.monitoringStates) {\n        if (item?.state != \"ok\" && item?.severity != \"info\" && item?.severity != \"deep_monitoring_ok\")\n            if (item?.entityId) {\n  \n            const pgResponse = await monitoredEntitiesClient.getEntity({\n              entityId: item.entityId\n            });\n\n            const hostResponse = await monitoredEntitiesClient.getEntity({\n              entityId: pgResponse.fromRelationships.isProcessOf[0].id\n            });\n              \n            const result = {\n              ...item,\n              name: pgResponse.displayName || \"Desconocido\",\n              host: hostResponse.displayName || \"Desconocido\",\n              //tags: tags.length > 0 ? tags : [\"Desconocido\"]\n            };\n          delete result.params;\n          results.push(result);\n        }\n      }\n    } else {\n      return(\"Error: `monitoringStates` no es un array.\");\n    }\n\n    return results;\n  } catch (error) {\n    return (\"Error obteniendo estados:\", error);\n  }\n}\n"},"logs":""},"visualization":"table"}}]}